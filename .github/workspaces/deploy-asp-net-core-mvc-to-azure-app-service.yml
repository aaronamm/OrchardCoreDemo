# How to use this GitHub Actions workflow:
# - Enable GitHub Action in your repository. 
#
# - Create Azure App Service with:
#   - code publish type
#   - .NET 5 stack
#   - Linux platform
#
# - Add required GitHub Secrets:
#   - Name: AZURE_WEBAPP_CODE_PUBLISH_NAME
#     Value: Your Azure App Service name (only name, not a full URL)
#
#   - Name: AZURE_WEBAPP_CODE_PUBLISH_PROFILE
#     Value: A content of downloaded publish profile from your App Service in Azure portal

#     *** Before downloading a publish profile, please make sure that you have set a configuration WEBSITE_WEBDEPLOY_USE_SCM = true.
#   - Name: WEB_PROJECT_DIR
#     Value: a directory of your main project which contains *.csproj without / at the end, e.g. src/App
#
# - Push your code to a branch that trigger this GitHub workflow.
# - GitHub Actions will automatic build and deploy the project to your App Service.

name: Deploy ASP.NET Core MVC app to Azure App Service Code

on:
  push:
    branches:
      - main

env:
  OUTPUT_DIR: publish # Relative to a current working directory
  DOTNET_VERSION: 5.0.x # Set .NET version to use
  NODE_VERSION: 12.x # Set Node.js version to use
  WEB_PROJECT_DIR: ${{ secrets.WEB_PROJECT_DIR }}

jobs:
  build:
    # Find more virtual environments
    # https://www.dotnetthailand.com/programming-cookbook/github-actions/github-actions-fundamentals#findmorevirtualenvironments
    runs-on: ubuntu-latest
    # You can use default run to set default working directory
    # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_iddefaultsrun
    defaults:
      run:
        working-directory: ${{ env.WEB_PROJECT_DIR }}

    steps:
      - name: Checkout the latest source code from "${{ github.ref }}" branch and "${{ github.sha }}" commit.
        uses: actions/checkout@v2

      - name: Set YARN_WORKSPACES_EXIST variable.
        working-directory: ${{ github.workspace }}
        run: |
          workspaces_info_result=$(yarn workspaces info > /dev/null 2>&1; echo $?; exit 0)
          if [ $workspaces_info_result -eq 0 ]; then echo "YARN_WORKSPACES_EXIST=1" >> $GITHUB_ENV; fi

      # https://github.com/actions/setup-node
      - name: Use Node.js version "${{ env.NODE_VERSION }}".
        if: ${{ env.YARN_WORKSPACES_EXIST == 1 }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build all Node.js projects if Yarn Workspaces exists.
        if: ${{ env.YARN_WORKSPACES_EXIST == 1 }}
        working-directory: ${{ github.workspace }}
        run: |
          yarn install
          yarn workspaces run build

      # https://github.com/actions/setup-dotnet
      - name: Setup .NET SDK version "${{ env.DOTNET_VERSION }}"."
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore Nuget packages.
        run: dotnet restore

      - name: Publish .NET project to "${{ env.WEB_PROJECT_DIR }}/${{ env.OUTPUT_DIR }}" folder
        run: dotnet publish --configuration Release --output ${{ env.OUTPUT_DIR }} --no-restore

      - name: Deploy to Azure App Service code publish
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_CODE_PUBLISH_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_CODE_PUBLISH_PROFILE }}
          # It looks like package option does not use "working-directory" into account, it still use default GITHUB_WORKSPACE value.
          package: ${{ env.WEB_PROJECT_DIR }}/${{ env.OUTPUT_DIR }} 